# c222079 /  ÍπÄÎØºÏàò / Î∞∞Ìè¨ÎßÅÌÅ¨ : https://hndvg5vxfubfjdpap7t92t.streamlit.app/

# ÎùºÏù¥Î∏åÎü¨Î¶¨ Î∂àÎü¨Ïò§Í∏∞
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import json


#######################
# Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
df_reshaped = pd.read_csv(url+'201412_202312_korea_population_year_UTF8.csv', encoding='UTF-8') # csv ÌååÏùº Î∂àÎü¨Ïò§Í∏∞

korea_geojson = json.load(open(url+'gdf_korea_sido_2022.json', encoding="UTF-8")) # json ÌååÏùº Î∂àÎü¨Ïò§Í∏∞

#######################
# Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤òÎ¶¨
df_reshaped.bfill(inplace=True) # NaNÍ∞íÏùÑ ÏïÑÎûòÏùò Í∞íÏúºÎ°ú Ï±ÑÏõÄ
df_reshaped.drop(11, inplace=True) # 11Î≤àÏß∏ Ìñâ(Í∞ïÏõêÏûêÏπòÎèÑ) ÏÇ≠Ï†ú
df_reshaped.drop(0, inplace=True) # 0Î≤àÏß∏ Ìñâ(Ï†ÑÍµ≠) ÏÇ≠Ï†ú
df_reshaped.reset_index(drop=True, inplace=True) # Ïù∏Îç±Ïä§ Ïû¨ÏÑ§Ï†ï

# ÌñâÏ†ïÍµ¨Ïó≠ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Îç∞Ïù¥ÌÑ∞Î•º Ï™ºÍ∞úÏÑú ÏÉàÎ°úÏö¥ Ïó¥Î°ú ÎßåÎì§Í∏∞
# expand=True : Ï™ºÍ∞úÏßÑ Îç∞Ïù¥ÌÑ∞Î•º ÏÉàÎ°úÏö¥ Ïó¥Î°ú ÎßåÎì§Ïñ¥Ï§å
df_reshaped[['city', 'code']] = df_reshaped['ÌñâÏ†ïÍµ¨Ïó≠'].str.split('(', expand=True) 
df_reshaped['code'] = df['code'].str.strip(')').str.replace('00000000', '')  # ÏΩîÎìúÏóê ÏûàÎäî Í¥ÑÌò∏ Ï†úÍ±∞ÌïòÍ≥† 00000000ÏùÑ Í≥µÎ∞±ÏúºÎ°ú Î≥ÄÍ≤Ω
df_reshaped.drop('ÌñâÏ†ïÍµ¨Ïó≠', axis=1, inplace=True) # ÌñâÏ†ïÍµ¨Ïó≠ Ïó¥ ÏÇ≠Ï†ú

df_reshaped = df_reshaped.melt(
    id_vars=['city', 'code'], 
    var_name='property', 
    value_name='population',
)

df_reshaped[['year', 'category']] = df_reshaped['property'].str.split('ÎÖÑ_', expand=True) # ÏÜçÏÑ±ÏùÑ Ïó∞ÎèÑÏôÄ Íµ¨Î∂ÑÏúºÎ°ú ÎÇòÎàÑÍ∏∞
df_reshaped.drop('property', axis=1, inplace=True) # ÏÜçÏÑ± Ïó¥ ÏÇ≠Ï†ú

df_reshaped['population'] = df_reshaped['population'].str.replace(',', '').astype('int') # Ïù∏Íµ¨ÏàòÎ•º ÏâºÌëúÎ•º ÏÇ≠Ï†úÌïú ÌõÑ Ï†ïÏàòÎ°ú Î≥ÄÌôò (Î¨∏ÏûêÏó¥ -> Ï†ïÏàò)
df_reshaped['year'] = df_reshaped['year'].astype('int') # Ïó∞ÎèÑÎ•º Ï†ïÏàòÎ°ú Î≥ÄÌôò (Î¨∏ÏûêÏó¥ -> Ï†ïÏàò)

df_reshaped = df_reshaped[['city', 'code', 'year', 'category', 'population']] # Ïó¥ ÏàúÏÑú Î≥ÄÍ≤Ω


##################################################
#1 Ïù∏Íµ¨Ï∂îÏù¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú/ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Í∞úÏù∏ ÎîîÎ†âÌÜ†Î¶¨Ïóê ÎßûÍ≤å url ÏàòÏ†ï!!
#url = 'data/'
#df_reshaped = pd.read_excel(url+'2014_2023Ïù∏Íµ¨Ï∂îÏù¥_Ï†ÑÏ≤òÎ¶¨.xlsx')
    
#2 korea_geojson ÏßÄÎèÑ Îç∞Ïù¥ÌÑ∞Î°úÎìú/ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!1!!!Í∞úÏù∏ÌååÏùº Ïù¥Î¶ÑÏóê ÎßûÍ≤å ÏßÄÎèÑÎç∞Ïù¥ÌÑ∞ Ïù¥Î¶Ñ ÏàòÏ†ï!!!
#korea_geojson = json.load(open(url+'Ï†ÑÍµ≠ÏßÄÎèÑ.json',encoding="UTF-8"))

#3 Ïó∞ÎèÑ Î∞è Ïπ¥ÌÖåÍ≥†Î¶¨ Î¶¨Ïä§Ìä∏
year_list = list(df_reshaped.year.unique())[::-1]
category_list =list(df_reshaped.category.unique())


###############################################################
# ÏÇ¨Ïù¥Ìä∏ Ïù¥Î¶Ñ ÏßÄÏ†ï
st.set_page_config(
    page_title="Korea Population Dashboard",
    page_icon="üèÇ",
    layout="wide",
    initial_sidebar_state="expanded")

# Í∞Å ÌéòÏù¥ÏßÄÏóê Ìï¥ÎãπÌïòÎäî Ìï®Ïàò Ï†ïÏùò

### Î©îÏù∏ ÌéòÏù¥ÏßÄ!
def main_page():

    st.title("üìä ÎåÄÌïúÎØºÍµ≠ Ïù∏Íµ¨ ÎåÄÏãúÎ≥¥Îìú")

    st.markdown("""
    #### ÎåÄÌïúÎØºÍµ≠ Ïù∏Íµ¨ ÎåÄÏãúÎ≥¥Îìú
    - Ïù¥ ÎåÄÏãúÎ≥¥ÎìúÎäî Ïó∞ÎèÑÎ≥Ñ, ÏßÄÏó≠Î≥Ñ, Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÎåÄÌïúÎØºÍµ≠ Ïù∏Íµ¨ Î≥ÄÌôîÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏãúÍ∞ÅÌôîÌï©ÎãàÎã§.
    - Ï£ºÏöî Î™©Ìëú:
        - ÏßÄÏó≠ Í∞Ñ Ïù∏Íµ¨ Ï¶ùÍ∞ê ÎπÑÍµê
        - Ïù∏Íµ¨ ÌÜµÍ≥ÑÏùò ÏãúÍ∞ÅÏ†Å ÌÉêÏÉâ
        - ÎåÄÌïúÎØºÍµ≠Ïùò Ïù∏Íµ¨ Íµ¨Ï°∞ Î≥ÄÌôî Ïù¥Ìï¥
    """)

    st.markdown("""
    #### Îç∞Ïù¥ÌÑ∞ Ï∂úÏ≤ò
    - **Ï£ºÎØºÎì±Î°ù Ïù∏Íµ¨ÌÜµÍ≥Ñ**: ÌñâÏ†ïÏïàÏ†ÑÎ∂Ä (https://jumin.mois.go.kr)
    - Îç∞Ïù¥ÌÑ∞ Í∏∞Í∞Ñ: **2014ÎÖÑ ~ 2023ÎÖÑ**
    """)

    st.markdown("""
    #### ÎåÄÏãúÎ≥¥Îìú ÏÇ¨Ïö© Î∞©Î≤ï
    1. **ÏÇ¨Ïù¥ÎìúÎ∞îÎ•º ÌôúÏö©ÌïòÏó¨ Ïó∞ÎèÑÏôÄ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉù**
    2. **ÏãúÍ∞ÅÌôî ÌÉ≠**ÏóêÏÑú ÏßÄÎèÑÏôÄ Í∑∏ÎûòÌîÑÎ•º ÌÜµÌï¥ ÏßÄÏó≠Î≥Ñ Ïù∏Íµ¨ Î≥ÄÌôîÎ•º ÌÉêÏÉâ
    3. **Ïù∏ÏÇ¨Ïù¥Ìä∏ ÌÉ≠**ÏóêÏÑú Ïù∏Íµ¨ Î≥ÄÌôîÏóê ÎåÄÌïú Ï£ºÏöî ÏöîÏïΩÍ≥º ÎØ∏Îûò Ï†ÑÎßùÏùÑ ÌôïÏù∏
    """)

    # Ï£ºÏöî ÌÜµÍ≥Ñ ÏöîÏïΩ (ÏòàÏãú Îç∞Ïù¥ÌÑ∞)
    total_population = 51800000  # Ï†ÑÏ≤¥ Ïù∏Íµ¨
    most_populated_city = "ÏÑúÏö∏ÌäπÎ≥ÑÏãú"
    least_populated_city = "ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú"
    population_growth_rate = -0.3  # Ï†ÑÎÖÑ ÎåÄÎπÑ ÏÑ±Ïû•Î•†
    
    st.markdown("""
    #### Ï£ºÏöî Ïù∏Íµ¨ ÌÜµÍ≥Ñ (2023ÎÖÑ Í∏∞Ï§Ä)
    - Ï¥ù Ïù∏Íµ¨: **{:,}Î™Ö**
    - Í∞ÄÏû• Ïù∏Íµ¨Í∞Ä ÎßéÏùÄ ÏßÄÏó≠: **{}**
    - Í∞ÄÏû• Ïù∏Íµ¨Í∞Ä Ï†ÅÏùÄ ÏßÄÏó≠: **{}**
    - Ïù∏Íµ¨ ÏÑ±Ïû•Î•†: **{:.1f}%**
    """.format(total_population, most_populated_city, least_populated_city, population_growth_rate))

    # ÏßÄÎèÑ ÎØ∏Î¶¨Î≥¥Í∏∞ (Ï∂ïÏÜåÎêú Î≤ÑÏ†Ñ)
    st.markdown("#### Ï£ºÏöî ÏãúÍ∞ÅÌôî ÎØ∏Î¶¨Î≥¥Í∏∞: ÏßÄÏó≠Î≥Ñ Ïù∏Íµ¨ Î∂ÑÌè¨ (2023ÎÖÑ)")
    map_fig_preview = px.choropleth_mapbox(
        df_reshaped[(df_reshaped['year'] == 2023) &(df_reshaped['category'] == 'Ï¥ùÏù∏Íµ¨Ïàò')],
        geojson=korea_geojson,
        featureidkey='properties.CTPRVN_CD',
        locations="code",
        color="population",
        center={"lat": 36.5, "lon": 127.8},
        zoom=5,
        mapbox_style="carto-darkmatter",
        color_continuous_scale="viridis",
        title="2023ÎÖÑ ÏßÄÏó≠Î≥Ñ Ïù∏Íµ¨ Î∂ÑÌè¨",
        labels={'population':'Ï¥ùÏù∏Íµ¨Ïàò','code':'ÏãúÎèÑÏΩîÎìú','city':'ÏãúÎèÑÎ™Ö'},
        hover_data=['city','population']
    )
    st.plotly_chart(map_fig_preview, use_container_width=True)

######### ÏãúÍ∞ÅÌôî ÌéòÏù¥ÏßÄ
def visualization_page():
    st.sidebar.title("üìà ÏãúÍ∞ÅÌôî ÏÑ§Ï†ï")


# Ìï®ÏàòÏ†ïÏùò

##1 Ïó∞ÎèÑÎ≥Ñ Ïù∏Íµ¨Ïàò Î≥ÄÌôî Í≥ÑÏÇ∞ Ìï®Ïàò ÏûëÏÑ±
    def calculate_population_difference(df,year,target):
        selected_year_data = df.query('year==@year & category == @target').reset_index()
        previous_year_data = df.query('year==@year-1 & category == @target').reset_index()
        selected_year_data['population_diff'] = selected_year_data['population'].sub(
            previous_year_data['population'],fill_value=0)
        selected_year_data['population_diff_abs'] = abs(selected_year_data['population_diff'])
        return selected_year_data[['city',
                                   'code',
                                   'population',
                                   'population_diff',
                                   'population_diff_abs']].sort_values(by='population_diff',ascending=False)

##2 ÌòïÏãùÎ≥ÄÌôò Ìï®Ïàò
    def format_number(num):
        if num > 1000000:
            if not num % 1000000:
                return f'{num // 1000000} M'
            return f'{round(num/1000000,1)} M'
        return f'{num // 1000} K'

##3 ÎèÑÎÑõ Ìï®Ïàò
    def make_donut(input_response, input_text, input_color):
        if input_color == 'blue':
            chart_color = ['#29b5e8','#155F7A']
        if input_color == 'green':
            chart_color = ['#27AE60', '#12783D']
        if input_color =='orange':
            chart_color = ['#F39C12','#87A12']
        if input_color == 'red':
            chart_color = ['#E74C3C','#781F16']

        source = pd.DataFrame({
            'Topic':['',input_text],
            '% value':[100-input_response, input_response]
        })

        source_bg = pd.DataFrame({
            'Topic':['',input_text],
            '% value':[100,0]
        })

        plot = alt.Chart(source).mark_arc(innerRadius=45, cornerRadius =25).encode(
            theta='% value',
            color= alt.Color('Topic:N',
                            scale = alt.Scale(
                                domain=[input_text,''],
                                range=chart_color),
                            legend=None),
        ).properties(width=130, height =130)

        text = plot.mark_text(align='center', color="#29b5e8", font="Lato", fontSize=32, fontWeight=700, fontStyle="italic").encode(
            text=alt.value(f'{input_response} %'))
        plot_bg = alt.Chart(source_bg).mark_arc(innerRadius=45, cornerRadius=20).encode(
            theta='% value',
            color=alt.Color(
                'Topic:N',
                scale=alt.Scale(
                    domain=[input_text,''],
                    range=chart_color),
                legend=None
            ),
        ).properties(
            width=130, height=130
        )
        return plot_bg + plot +text

##4 ÏßÄÎèÑ Ìï®Ïàò
    def make_choropleth(input_df, input_id, input_column, input_color_theme):
        choropleth = px.choropleth_mapbox(input_df, 
                                   locations=input_id, 
                                   color=input_column, 
                                   color_continuous_scale=input_color_theme,
                                   geojson=korea_geojson,
                                   featureidkey='properties.CTPRVN_CD',
                                   range_color=(0, max(df_all.population)),
                                   center = {'lat':35.9,'lon':126.98},
                                   mapbox_style='carto-darkmatter',
                                   zoom=5,
                                   labels={'population':f'{selected_category}','code':'ÏãúÎèÑÏΩîÎìú','city':'ÏãúÎèÑÎ™Ö'},
                                   hover_data=['city','population']
                                  )
        choropleth.update_geos(
        fitbounds='locations',
        visible=False
        )
        choropleth.update_layout(
            template='plotly_dark',
            plot_bgcolor='rgba(0, 0, 0, 0)',
            paper_bgcolor='rgba(0, 0, 0, 0)',
            margin=dict(l=0, r=0, t=0, b=0),
            height=350
        )
        return choropleth

##5 ÌûàÌä∏Îßµ Ìï®Ïàò
    def make_heatmap(input_df, input_y, input_x, input_color, input_color_theme):
        heatmap = alt.Chart(input_df).mark_rect().encode(
                y=alt.Y(
                    f'{input_y}:O', 
                    axis=alt.Axis(title="Ïó∞ÎèÑ",                            
                                  titleFontSize=16, 
                                  titlePadding=15, 
                                  titleFontWeight=900, 
                                  labelAngle=0)),
                x=alt.X(
                    f'{input_x}:O', 
                    axis=alt.Axis(title="ÏãúÎèÑÎ™Ö", 
                                  titleFontSize=16, 
                                  titlePadding=15, 
                                  titleFontWeight=900)),
                color=alt.Color(
                    f'max({input_color}):Q',
                    legend=None,
                    scale=alt.Scale(scheme=input_color_theme)),
                stroke=alt.value('black'),
                strokeWidth=alt.value(0.25),
                tooltip=[
                    alt.Tooltip('year:O',title='Ïó∞ÎèÑ'),
                    alt.Tooltip('population:Q',title=f'{selected_category}')
                    ]).properties(
            width=900
        ).configure_legend(
            orient='bottom',
            titleFontSize=16,
            labelFontSize=14,
            titlePadding=0
        ).configure_axis(
            labelFontSize=12,
            titleFontSize=12
        )
        return heatmap


#4 ÏÇ¨Ïù¥ÎìúÎ∞î Íµ¨ÌòÑ

    with st.sidebar:
        st.title('üèÇ ÎåÄÌïúÎØºÍµ≠ Ïù∏Íµ¨ ÎåÄÏãúÎ≥¥Îìú')
    
        selected_year = st.selectbox('Ïó∞ÎèÑ ÏÑ†ÌÉù', year_list, index=len(year_list)-1)
        df_selected_year = df_reshaped[df_reshaped.year == selected_year]
        df_selected_year_sorted = df_selected_year.sort_values(by="population", ascending=False)

        selected_category = st.selectbox('Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù', category_list, index=len(category_list)-1)
        df_selected_category = df_reshaped[df_reshaped.category == selected_category]
        df_selected_category_sorted = df_selected_category.sort_values(by="population", ascending=False)

        df_all= df_reshaped[(df_reshaped.category == selected_category)&(df_reshaped.year == selected_year)]
        df_all_sorted = df_all.sort_values(by='population', ascending = False)

        color_theme_list = ['blues', 'cividis', 'greens', 'inferno', 'magma', 'plasma', 'reds', 'rainbow', 'turbo', 'viridis']
        selected_color_theme = st.selectbox('Ïª¨Îü¨ ÌÖåÎßà ÏÑ†ÌÉù', color_theme_list)

    #5. Ïù∏Íµ¨Ï¶ùÍ∞ê, ÎèÑÎÑõ Í∑∏ÎûòÌîÑ Íµ¨ÌòÑ(col1)
    col = st.columns((1.5, 4.5, 2), gap='medium')
    with col[0]:
        st.markdown('#### Ï¶ùÍ∞Ä/Í∞êÏÜå')
    
        df_population_difference_sorted = calculate_population_difference(df_reshaped, selected_year,selected_category)
    
        if selected_year > 2014:
            first_city_name = df_population_difference_sorted.city.iloc[0]
            first_city_population = format_number(df_population_difference_sorted.population.iloc[0])
            first_city_delta = format_number(df_population_difference_sorted.population_diff.iloc[0])
        else:
            first_city_name = '-'
            first_city_population = '-'
            first_city_delta = ''
        st.metric(label=first_city_name, value=first_city_population, delta=first_city_delta)
    
        if selected_year > 2014:
            last_city_name = df_population_difference_sorted.city.iloc[-1]
            last_city_population = format_number(df_population_difference_sorted.population.iloc[-1])   
            last_city_delta = format_number(df_population_difference_sorted.population_diff.iloc[-1])   
        else:
            last_city_name = '-'
            last_city_population = '-'
            last_city_delta = ''
        st.metric(label=last_city_name, value=last_city_population, delta=last_city_delta)
    
        
        st.markdown('#### Î≥ÄÎèô ÏãúÎèÑ ÎπÑÏú®')
    
        if selected_year > 2014:
            # Filter cities with population difference > 5000
            # df_greater_50000 = df_population_difference_sorted[df_population_difference_sorted.population_difference_absolute > 50000]
            df_greater_5000 = df_population_difference_sorted[df_population_difference_sorted.population_diff > 5000]
            df_less_5000 = df_population_difference_sorted[df_population_difference_sorted.population_diff < -5000]
            
            # % of cities with population difference > 50000
            city_migration_greater = round((len(df_greater_5000)/df_population_difference_sorted.city.nunique())*100)
            city_migration_less = round((len(df_less_5000)/df_population_difference_sorted.city.nunique())*100)
            donut_chart_greater = make_donut(city_migration_greater, 'Ï†ÑÏûÖ', 'green')
            donut_chart_less = make_donut(city_migration_less, 'Ï†ÑÏ∂ú', 'red')
        else:
            city_migration_greater = 0
            city_migration_less = 0
            donut_chart_greater = make_donut(city_migration_greater, 'Ï†ÑÏûÖ', 'green')
            donut_chart_less = make_donut(city_migration_less, 'Ï†ÑÏ∂ú', 'red')
    
        migrations_col = st.columns((0.2, 1, 0.2))
        with migrations_col[1]:
            st.write('Ï¶ùÍ∞Ä')
            st.altair_chart(donut_chart_greater)
            st.write('Í∞êÏÜå')
            st.altair_chart(donut_chart_less)

    #6 ÏßÄÎèÑÏãúÍ∞ÅÌôî Î∞è Ï∞®Ìä∏Îßµ Íµ¨ÌòÑ(col2)
    
    with col[1]:
        st.markdown(f'#### {selected_year}ÎÖÑ {selected_category}')
        
        choropleth = make_choropleth(df_all, 'code', 'population', selected_color_theme)
        st.plotly_chart(choropleth, use_container_width=True)
    
        heatmap = make_heatmap(df_reshaped[df_reshaped['category']==f'{selected_category}'], 'year', 'city', 'population', selected_color_theme)
        st.altair_chart(heatmap, use_container_width=True)
    
    
    #7 ÏãúÎèÑÎ≥Ñ Ïù∏Íµ¨Ïàò Î∞è Í∏∞ÌÉÄÏ†ïÎ≥¥
    with col[2]:
        st.markdown(f'#### ÏãúÎèÑÎ≥Ñ {selected_category}')
    
        st.dataframe(df_all_sorted,
                     column_order=("city", "population"),
                     hide_index=True,
                     width=None,
                     column_config={
                        "city": st.column_config.TextColumn(
                            "city",
                        ),
                        "population": st.column_config.ProgressColumn(
                            "Population",
                            format="%f",
                            min_value=0,
                            max_value=max(df_all_sorted.population),
                         )}
                     )
        
        with st.expander('Ï†ïÎ≥¥', expanded=True):
            st.write('''
                - Data: [ÌñâÏ†ïÏïàÏ†ÑÎ∂Ä Ï£ºÎØºÎì±Î°ùÏù∏Íµ¨ÌÜµÍ≥Ñ](<https://https://jumin.mois.go.kr.html>).
                - :orange[**Ï¶ùÍ∞Ä/Í∞êÏÜå**]: ÏÑ†ÌÉùÌïú Ïó∞ÎèÑ/Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú Í∞ÄÏû• ÎßéÏù¥ Ï¶ùÍ∞Ä/Í∞êÏÜåÌïú ÏãúÎèÑ
                - :orange[**Î≥ÄÎèô ÏãúÎèÑ ÎπÑÏú®**]: ÏÑ†ÌÉùÌïú Ïó∞ÎèÑ/Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú Ïù∏Íµ¨Í∞Ä 5000Î™Ö Ïù¥ÏÉÅ Ï¶ùÍ∞Ä/Í∞êÏÜåÌïú ÏãúÎèÑÏùò ÎπÑÏú® ''')




##### Ïù∏ÏÇ¨Ïù¥Ìä∏ ÌéòÏù¥ÏßÄ
def insights_page():
    st.title("üìã Ï£ºÏöî Ïù∏ÏÇ¨Ïù¥Ìä∏")
    
    st.markdown("""
    ### ÎåÄÌïúÎØºÍµ≠ Ïù∏Íµ¨Ïùò Ï£ºÏöî Î≥ÄÌôî
    - ÏßÄÏó≠Î≥Ñ Ïù∏Íµ¨ Ï¶ùÍ∞êÏùò Ï£ºÏöî ÏöîÏù∏ Î∂ÑÏÑù
    - Ïù∏Íµ¨ Ï¶ùÍ∞Ä ÏßÄÏó≠Í≥º Í∞êÏÜå ÏßÄÏó≠ ÎπÑÍµê
    """)
    
    st.markdown("""
    ### Ï£ºÏöî ÏöîÏïΩ
    - ÏµúÍ∑º Ïó∞ÎèÑ Í∏∞Ï§Ä Ï†ÑÍµ≠ Ïù∏Íµ¨: **52,000,000Î™Ö**ÏóêÏÑú **51,800,000Î™Ö**ÏúºÎ°ú **-0.3% Í∞êÏÜå**.
    - Ïù∏Íµ¨Í∞Ä Í∞ÄÏû• ÎßéÏù¥ Ï¶ùÍ∞ÄÌïú ÏßÄÏó≠: **ÏÑúÏö∏ÌäπÎ≥ÑÏãú** (+100,000Î™Ö).
    - Ïù∏Íµ¨Í∞Ä Í∞ÄÏû• ÎßéÏù¥ Í∞êÏÜåÌïú ÏßÄÏó≠: **Ï†ÑÎùºÎ∂ÅÎèÑ** (-50,000Î™Ö).
    """)
    
    st.markdown("""
    ### ÏßÄÏó≠Î≥Ñ Ïù∏Íµ¨ Ï¶ùÍ∞ê ÏöîÏù∏
    - **Ïù∏Íµ¨ Ï¶ùÍ∞Ä ÏßÄÏó≠**:
        - ÎåÄÎèÑÏãú Ï§ëÏã¨ÏúºÎ°ú Ï∂úÏÉùÎ•†ÏùÄ Í∞êÏÜåÌñàÏßÄÎßå, **ÏÑúÏö∏ÌäπÎ≥ÑÏãú**ÏôÄ **ÏàòÎèÑÍ∂å**ÏùÄ Ïù¥Ï£º Ï¶ùÍ∞ÄÎ°ú Ïù∏Ìï¥ Ïù∏Íµ¨Í∞Ä Ï¶ùÍ∞Ä.
        - **Í≤ΩÍ∏∞ÎèÑ**Îäî Ïã†Í∑ú ÏïÑÌååÌä∏ Í≥µÍ∏â Î∞è ÏßÅÏ£º Í∑ºÏ†ë Ìö®Í≥ºÎ°ú Ïù∏Ìï¥ Ïù∏Íµ¨ Ïú†ÏûÖÏù¥ ÌôúÎ∞ú.
    - **Ïù∏Íµ¨ Í∞êÏÜå ÏßÄÏó≠**:
        - **Ï†ÑÎùºÎÇ®ÎèÑ**, **Í≤ΩÏÉÅÎ∂ÅÎèÑ** Îì± ÎÜçÏ¥å ÏßÄÏó≠ÏùÄ Ïù∏Íµ¨ Í∞êÏÜåÍ∞Ä ÎëêÎìúÎü¨ÏßÄÎ©∞, Ï≤≠ÎÖÑÏ∏µ Ïù¥ÌÉàÎ°ú Ïù∏Ìï¥ ÎÖ∏Îèô Ïó∞Î†πÎåÄ Ïù∏Íµ¨Í∞Ä Í∏âÍ∞ê.
        - ÎÖ∏Î†πÌôîÏôÄ Ï∂úÏÇ∞Ïú® Í∞êÏÜåÍ∞Ä Î≥µÌï©Ï†ÅÏúºÎ°ú ÏûëÏö©
    """)

    st.markdown("""
    ### Ïó∞Î†πÎåÄ Î∞è ÏÑ±Î≥Ñ Î≥ÄÌôî
    - **Ïó∞Î†πÎ≥ÄÌôî**:
        - 20~30ÎåÄ Ï≤≠ÎÖÑÏ∏µÏùÄ ÏàòÎèÑÍ∂åÏúºÎ°ú Ïù¥Îèô, ÏßÄÎ∞©Ïùò ÎπÑÏú®ÏùÄ Í∞êÏÜå Ï∂îÏÑ∏.
        - 65ÏÑ∏ Ïù¥ÏÉÅ Ïù∏Íµ¨ ÎπÑÏ§ëÏùÄ **2023ÎÖÑ Í∏∞Ï§Ä Ï†ÑÏ≤¥Ïùò 18%**Î°ú, Í≥†Î†πÌôî ÏÜçÎèÑÍ∞Ä Í∞ÄÏÜçÌôîÎêòÍ≥† ÏûàÏùå.
        
    - **ÏÑ±Î≥Ñ ÎπÑÏ§ë**:
        - ÎÇ®ÏÑ± Ïù∏Íµ¨ÏôÄ Ïó¨ÏÑ± Ïù∏Íµ¨Ïùò ÎπÑÏú®ÏùÄ ÏïΩÍ∞ÑÏùò Ï∞®Ïù¥Î•º Î≥¥Ïù¥Î©∞, Ï∂úÏÉù ÏÑ±ÎπÑÎäî 1.05Î°ú ÏïàÏ†ïÏÑ∏.
    """)
    
    st.markdown("""
    ### ÎØ∏Îûò Ï†ÑÎßù
    - **Ï∂úÏÇ∞Ïú® Í∞êÏÜåÏôÄ Í≥†Î†πÌôî**:
        - Ï∂úÏÉùÎ•†ÏùÄ ÏßÄÎÇú 5ÎÖÑÍ∞Ñ Îß§ÎÖÑ ÏïΩ 5% Í∞êÏÜå. **Ï∂úÏÇ∞Ïú® 0.8Î™Ö Ïù¥Ìïò**Î°ú ÏÑ∏Í≥Ñ ÏµúÏ†Ä ÏàòÏ§Ä.
        - Í≥†Î†πÌôî ÏÜçÎèÑÎäî OECD Íµ≠Í∞Ä Ï§ë Í∞ÄÏû• Îπ†Î•¥Î©∞, 2050ÎÖÑÍπåÏßÄ 65ÏÑ∏ Ïù¥ÏÉÅ Ïù∏Íµ¨ ÎπÑÏ§ëÏù¥ **35%**Î•º Ï¥àÍ≥ºÌï† Í≤ÉÏúºÎ°ú ÏòàÏÉÅ.
    
    - **ÏßÄÏó≠ Í∞Ñ Í≤©Ï∞® ÌôïÎåÄ**:
        - ÏàòÎèÑÍ∂å ÏßëÏ§ëÌôîÎ°ú ÏßÄÎ∞© ÏÜåÎ©∏ ÏúÑÍ∏∞Í∞Ä Ïã¨Ìôî. ÌäπÌûà **Ï†ÑÎùºÎÇ®ÎèÑ**, **Í≤ΩÏÉÅÎ∂ÅÎèÑ** ÏùºÎ∂Ä ÏßÄÏó≠ÏùÄ 10ÎÖÑ ÎÇ¥ ÏÜåÎ©∏ ÏúÑÌóò ÏßÄÏó≠ÏúºÎ°ú Î∂ÑÎ•ò.
    """)


# ÌéòÏù¥ÏßÄ ÏÑ†ÌÉù Í∏∞Îä•ÏùÄ Î™®Îì† Ìï®ÏàòÍ∞Ä Ï†ïÏùòÎêú ÌõÑ Î∞∞Ïπò
page = st.sidebar.radio("ÌéòÏù¥ÏßÄ ÏÑ†ÌÉù", ["Î©îÏù∏", "ÏãúÍ∞ÅÌôî", "Ïù∏ÏÇ¨Ïù¥Ìä∏"])

if page == "Î©îÏù∏":
    main_page()
elif page == "ÏãúÍ∞ÅÌôî":
    visualization_page()
elif page == "Ïù∏ÏÇ¨Ïù¥Ìä∏":
    insights_page()

###########################################################












            
